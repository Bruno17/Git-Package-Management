{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intro Git Package Management [GPM] is a component for MODX Revolution. The main purpose is to make life easier for MODX developers. After installation you can manage components that are stored outside of MODX root directory . After creating straightforward json config, you can install the component to the MODX and continue in development process. You will never again need to manually create system settings, menus, elements and database tables.","title":"Home"},{"location":"#intro","text":"Git Package Management [GPM] is a component for MODX Revolution. The main purpose is to make life easier for MODX developers. After installation you can manage components that are stored outside of MODX root directory . After creating straightforward json config, you can install the component to the MODX and continue in development process. You will never again need to manually create system settings, menus, elements and database tables.","title":"Intro"},{"location":"directory-structure/","text":"All in one folder This is the option I prefer and set up on my local dev environment. Localhost http://localhost points to /var/www/ directory, where is located MODX directory and all packages. var www modx http://localhost/modx assets core setup ... package1 http://localhost/package1 assets core ... package2 http://localhost/package2 assets core ... In this case set Packages directory to /var/www/ and Packages base URL to / . Separate MODX, separate packages Localhost http://localhost points to /var/www/ directory, where the MODX directory is located. All packages are located in /var/www/packages/ . var www modx http://localhost/modx assets core setup ... packages package1 http://localhost/packages/package1 assets core ... package2 http://localhost/packages/package2 assets core ... In this case set Packages directory to /var/www/packages/ and Packages base URL to /packages/ . Packages under MODX This option I mostly use on remote environments like MODX cloud . Localhost http://localhost points to /var/www/ directory, where is located MODX. All packages are located in /var/www/packages/ . var www http://localhost assets core manager setup packages package1 http://localhost/packages/package1 assets core ... package2 http://localhost/packages/package1 assets core ... ... In this case set Packages directory to /var/www/packages/ and Packages base URL to /packages/ .","title":"Directory structure"},{"location":"directory-structure/#all-in-one-folder","text":"This is the option I prefer and set up on my local dev environment. Localhost http://localhost points to /var/www/ directory, where is located MODX directory and all packages. var www modx http://localhost/modx assets core setup ... package1 http://localhost/package1 assets core ... package2 http://localhost/package2 assets core ... In this case set Packages directory to /var/www/ and Packages base URL to / .","title":"All in one folder"},{"location":"directory-structure/#separate-modx-separate-packages","text":"Localhost http://localhost points to /var/www/ directory, where the MODX directory is located. All packages are located in /var/www/packages/ . var www modx http://localhost/modx assets core setup ... packages package1 http://localhost/packages/package1 assets core ... package2 http://localhost/packages/package2 assets core ... In this case set Packages directory to /var/www/packages/ and Packages base URL to /packages/ .","title":"Separate MODX, separate packages"},{"location":"directory-structure/#packages-under-modx","text":"This option I mostly use on remote environments like MODX cloud . Localhost http://localhost points to /var/www/ directory, where is located MODX. All packages are located in /var/www/packages/ . var www http://localhost assets core manager setup packages package1 http://localhost/packages/package1 assets core ... package2 http://localhost/packages/package1 assets core ... ... In this case set Packages directory to /var/www/packages/ and Packages base URL to /packages/ .","title":"Packages under MODX"},{"location":"installation/","text":"Package Download the latest package from _packages and copy it to your MODX core/packages/ directory. Open the MODX manager and go to the Extras/Installer (System/Package Management in Revolution 2.2) and search for local packages. Git Package Management package will appear in the list. Install the package (during installation you'll be asked to provide some information ). CLI Clone GPM to your packages directory Open cli directory and run composer install Make bin/gpm executable chmod +x bin/gpm Run ./bin/gpm gpm:install --corePath=/absolute/path/to/modx/core/ To get list of all command options run ./bin/gpm gpm:install --help Directories required as writable _build core/components/ $lowCaseName$ /model/ $lowCaseName$","title":"Installation"},{"location":"installation/#package","text":"Download the latest package from _packages and copy it to your MODX core/packages/ directory. Open the MODX manager and go to the Extras/Installer (System/Package Management in Revolution 2.2) and search for local packages. Git Package Management package will appear in the list. Install the package (during installation you'll be asked to provide some information ).","title":"Package"},{"location":"installation/#cli","text":"Clone GPM to your packages directory Open cli directory and run composer install Make bin/gpm executable chmod +x bin/gpm Run ./bin/gpm gpm:install --corePath=/absolute/path/to/modx/core/ To get list of all command options run ./bin/gpm gpm:install --help","title":"CLI"},{"location":"installation/#directories-required-as-writable","text":"_build core/components/ $lowCaseName$ /model/ $lowCaseName$","title":"Directories required as writable"},{"location":"system-settings/","text":"All system settings are located under gitpackagemanagement namespace. Packages directory Key: gitpackagemanagement.packages_dir Absolute path to the directory where are all your packages stored. Packages base URL Key: gitpackagemanagement.packages_base_url Default: / Base URL for packages directory. Enable remote debugging Key: gitpackagemanagement.enable_debug Default: false Activating this setting, plugins and snippets are no longer created as static elements, but the static file is required from the content field. This way it's possible to debug them directly. Remove extracted transport package Key: gitpackagemanagement.remove_extracted_package Default: false Activating this setting, the extracted transport package is removed after building.","title":"System settings"},{"location":"system-settings/#packages-directory","text":"Key: gitpackagemanagement.packages_dir Absolute path to the directory where are all your packages stored.","title":"Packages directory"},{"location":"system-settings/#packages-base-url","text":"Key: gitpackagemanagement.packages_base_url Default: / Base URL for packages directory.","title":"Packages base URL"},{"location":"system-settings/#enable-remote-debugging","text":"Key: gitpackagemanagement.enable_debug Default: false Activating this setting, plugins and snippets are no longer created as static elements, but the static file is required from the content field. This way it's possible to debug them directly.","title":"Enable remote debugging"},{"location":"system-settings/#remove-extracted-transport-package","text":"Key: gitpackagemanagement.remove_extracted_package Default: false Activating this setting, the extracted transport package is removed after building.","title":"Remove extracted transport package"},{"location":"config/build/","text":"Define build options here. Wrapper: build { build :{} } Available properties: resolver (optional) - Resolver options readme (optional, default: docs/readme.txt) - Path to readme file license (optional, default: docs/license.txt) - Path to license file changelog (optional, default: docs/changelog.txt) - Path to change log file schemaPath (optional, default: /core/components/$lowCaseName$/model/schema/$lowCaseName$.mysql.schema.xml) - Path to the XML schema file setupOptions (optional) - Setup options object options (optional) - Options object Example { build :{ readme : docs/readme.txt , schemaPath : _build/schema/mypackage.mysql.schema.xml } } Resolver part Define resolver options here. Resolvers are run when a package is installed, upgraded, or uninstalled inside the MODX package manager; not when a package is updated within Git Package Management. Wrapper: resolver { resolver :{} } Available properties: resolversDir (optional, default: resolvers) - Directory for custom resolvers before (optional, default: empty array) - Array with paths to resolvers, which will be executed before assets core file resolvers after (optional, default: empty array) - Array with paths to resolvers, which will be executed after assets core file resolvers files (optional, default: empty array) - Array with source and target, used to create a file resolver. (File resolvers for assets core are created automatically) Available placeholders for source item: [[+assetsPath]], [[+corePath]], [[+packagePath]] Example { resolver :{ resolversDir : resolvers , after : [ resolve.customresolver.php ], files : [{ source : [[+packagePath]]/move_under_assets , target : return MODX_ASSETS_PATH . 'components/'; }] } } Setup options part Define setup options here. Setup options are requested and used during the installation process of a package. Wrapper: setupOptions { setupOptions :{} } Available properties: source (required if setup options are used) - Script that will handle setup options, must be placed in _build folder Example { setupOptions :{ source : setup.options.php } } Build options part Define build options here. These options could be used to modify the build process i.e. in own gitpackage processors. Wrapper: options { options :{} } Available properties: empty_folders Could contain an array of emptied folders during the build. The files in the folders are selected with the PHP glob method with the GLOB_BRACE option. The file list is inverted with a leading ! sign. Example { options : { empty_folders : { {package_path}core/components/xxx/vendor/mpdf/mpdf/tmp : * , {package_path}core/components/xxx/vendor/mpdf/mpdf/ttfonts : !{DejaVu,Free}* , {package_path}core/components/xxx/vendor/mpdf/mpdf/ttfontdata : * } encrypt : true } } The build options could be used in a custom build processor with the following code: $buildOptions = $this- config- getBuild()- getBuildOptions(); if ($this- modx- getOption('encrypt', $buildOptions, false)) { ... } empty_folder Build helper methods There are two build helper methods available, that could be used in a custom build processor: prependVehicles and appendVehicles. The methods are called during the build process of a package. prependVehicles This method is called in the build process before adding the first vehicle. It could be used to add own custom vehicles to the package or to empty temporary folders in the assets/components or core/components , that would be packaged otherwise automatically into the package. appendVehicles This method is called in the build process after adding the last vehicle. It could be used to add own custom vehicles to the package or to do other things at the end of a build process. An example for the usage of both methods in a custom build processor could be found on https://github.com/Jako/Git-Package-Management/blob/feature/publish/core/components/gitpackagemanagement/processors/mgr/gitpackage/buildpackagepublish.class.php#L132-L187. This processor adds - amongst other things - two custom vehicles before the first default vehicle and one custom vehicle after the last vehicle. These vehicles are used to add methods to decrypt the category vehicle during the install process of the package.","title":"Build"},{"location":"config/build/#available-properties","text":"resolver (optional) - Resolver options readme (optional, default: docs/readme.txt) - Path to readme file license (optional, default: docs/license.txt) - Path to license file changelog (optional, default: docs/changelog.txt) - Path to change log file schemaPath (optional, default: /core/components/$lowCaseName$/model/schema/$lowCaseName$.mysql.schema.xml) - Path to the XML schema file setupOptions (optional) - Setup options object options (optional) - Options object","title":"Available properties:"},{"location":"config/build/#example","text":"{ build :{ readme : docs/readme.txt , schemaPath : _build/schema/mypackage.mysql.schema.xml } }","title":"Example"},{"location":"config/build/#resolver-part","text":"Define resolver options here. Resolvers are run when a package is installed, upgraded, or uninstalled inside the MODX package manager; not when a package is updated within Git Package Management. Wrapper: resolver { resolver :{} }","title":"Resolver part"},{"location":"config/build/#available-properties_1","text":"resolversDir (optional, default: resolvers) - Directory for custom resolvers before (optional, default: empty array) - Array with paths to resolvers, which will be executed before assets core file resolvers after (optional, default: empty array) - Array with paths to resolvers, which will be executed after assets core file resolvers files (optional, default: empty array) - Array with source and target, used to create a file resolver. (File resolvers for assets core are created automatically) Available placeholders for source item: [[+assetsPath]], [[+corePath]], [[+packagePath]]","title":"Available properties:"},{"location":"config/build/#example_1","text":"{ resolver :{ resolversDir : resolvers , after : [ resolve.customresolver.php ], files : [{ source : [[+packagePath]]/move_under_assets , target : return MODX_ASSETS_PATH . 'components/'; }] } }","title":"Example"},{"location":"config/build/#setup-options-part","text":"Define setup options here. Setup options are requested and used during the installation process of a package. Wrapper: setupOptions { setupOptions :{} }","title":"Setup options part"},{"location":"config/build/#available-properties_2","text":"source (required if setup options are used) - Script that will handle setup options, must be placed in _build folder","title":"Available properties:"},{"location":"config/build/#example_2","text":"{ setupOptions :{ source : setup.options.php } }","title":"Example"},{"location":"config/build/#build-options-part","text":"Define build options here. These options could be used to modify the build process i.e. in own gitpackage processors. Wrapper: options { options :{} }","title":"Build options part"},{"location":"config/build/#available-properties_3","text":"empty_folders Could contain an array of emptied folders during the build. The files in the folders are selected with the PHP glob method with the GLOB_BRACE option. The file list is inverted with a leading ! sign.","title":"Available properties:"},{"location":"config/build/#example_3","text":"{ options : { empty_folders : { {package_path}core/components/xxx/vendor/mpdf/mpdf/tmp : * , {package_path}core/components/xxx/vendor/mpdf/mpdf/ttfonts : !{DejaVu,Free}* , {package_path}core/components/xxx/vendor/mpdf/mpdf/ttfontdata : * } encrypt : true } } The build options could be used in a custom build processor with the following code: $buildOptions = $this- config- getBuild()- getBuildOptions(); if ($this- modx- getOption('encrypt', $buildOptions, false)) { ... }","title":"Example"},{"location":"config/build/#empty_folder","text":"","title":"empty_folder"},{"location":"config/build/#build-helper-methods","text":"There are two build helper methods available, that could be used in a custom build processor: prependVehicles and appendVehicles. The methods are called during the build process of a package.","title":"Build helper methods"},{"location":"config/build/#prependvehicles","text":"This method is called in the build process before adding the first vehicle. It could be used to add own custom vehicles to the package or to empty temporary folders in the assets/components or core/components , that would be packaged otherwise automatically into the package.","title":"prependVehicles"},{"location":"config/build/#appendvehicles","text":"This method is called in the build process after adding the last vehicle. It could be used to add own custom vehicles to the package or to do other things at the end of a build process. An example for the usage of both methods in a custom build processor could be found on https://github.com/Jako/Git-Package-Management/blob/feature/publish/core/components/gitpackagemanagement/processors/mgr/gitpackage/buildpackagepublish.class.php#L132-L187. This processor adds - amongst other things - two custom vehicles before the first default vehicle and one custom vehicle after the last vehicle. These vehicles are used to add methods to decrypt the category vehicle during the install process of the package.","title":"appendVehicles"},{"location":"config/database/","text":"Define table's prefix and tables here Wrapper: database { database :{} } Available properties: prefix (optional, default: modx_) - Prefix for tables tables (required) - Array of object class names simpleObjects (optional) - Array of simple objects that should be loaded Example { database :{ tables : [ PackageItem ] , prefix : modx_ , simpleObjects : [ SimplePackageItem ] } }","title":"Database"},{"location":"config/database/#available-properties","text":"prefix (optional, default: modx_) - Prefix for tables tables (required) - Array of object class names simpleObjects (optional) - Array of simple objects that should be loaded","title":"Available properties:"},{"location":"config/database/#example","text":"{ database :{ tables : [ PackageItem ] , prefix : modx_ , simpleObjects : [ SimplePackageItem ] } }","title":"Example"},{"location":"config/dependencies/","text":"Define package dependencies here. Wrapper: dependencies (array) { dependencies : [] } Available properties: name (required) - Name of the dependent package version (required) - Version of the package Example { dependencies : [{ name : collections , version : =3.2.0 }] }","title":"Dependencies"},{"location":"config/dependencies/#available-properties","text":"name (required) - Name of the dependent package version (required) - Version of the package","title":"Available properties:"},{"location":"config/dependencies/#example","text":"{ dependencies : [{ name : collections , version : =3.2.0 }] }","title":"Example"},{"location":"config/examples/","text":"Full config example { name : Package , lowCaseName : package , description : Package description , author : Author name , version : 1.0.0 , package :{ actions : [{ id : 1 , controller : index , hasLayout : 1 , langTopics : package:default , assets : }] , menus : [{ text : package , description : package.menu_desc , action : 1 , parent : components , icon : , menuIndex : 0 , params : , handler : }] , elements : { plugins : [{ name : PackagePlugin , file : packageplugin.plugin.php , events : [ OnPageNotFound ] }] , snippets : [{ name : PackageSnippet , file : packagesnippet.snippet.php , properties : [{ name : testproperty , desc : package.packagesnippet.testproperty , type : textfield , options : , value : test value , lexicon : package:properties , area : }] }] , chunks : [{ name : PackageChunk , file : packagechunk.chunk.tpl }] , templates : [{ name : PackageTemplate , file : packagetemplate.template.tpl }] , tvs : [{ caption : MyTV , name : mytv , type : text , description : This is the best TV , templates : [ PackageTemplate ] }] } , resources : [{ pagetitle : Test Resources , alias : test-resources , content : Test content , parent : Some Resource , tvs : [{ name : test-tv , value : Value for test TV }] , others : [{ name : tagger-1 , value : Tag #1, Tag #2 }] }] , systemSettings : [{ key : test_key , type : textfield , area : default , value : it works }] } , database : { tables : [ PackageItem ] , prefix : modx_ , simpleObjects : [ SimplePackageItem ] } , extensionPackage : { serviceName : package , serviceClass : Package } , build : { readme : docs/readme.txt , resolver : { resolversDir : resolvers , after : [ resolver.customresolver.php ] } } } Minimal config example This config shows only required params for each section. If you don't need any section, remove it. { name : Package , lowCaseName : package , description : Package description , author : Author name , version : 1.0.0 , package :{ actions : [{ id : 1 , controller : index }] , menus : [{ text : package , action : 1 }] , elements : { plugins : [{ name : PackagePlugin , events : [ OnPageNotFound ] }] , snippets : [{ name : PackageSnippet , properties : [{ name : testproperty , value : test value }] }] , chunks : [{ name : PackageChunk }] , templates : [{ name : PackageTemplate }] , tvs : [{ caption : MyTV , templates : [ PackageTemplate ] }] } , resources : [{ pagetitle : Test Resources , alias : test-resources , content : Test content , tvs : [{ name : test-tv , value : Value for test TV }] }] , systemSettings : [{ key : test_key , value : it works }] } , database : { tables : [ PackageItem ] } , extensionPackage : {} , build : { resolver : { after : [ resolver.customresolver.php ] } } }","title":"Examples"},{"location":"config/examples/#full-config-example","text":"{ name : Package , lowCaseName : package , description : Package description , author : Author name , version : 1.0.0 , package :{ actions : [{ id : 1 , controller : index , hasLayout : 1 , langTopics : package:default , assets : }] , menus : [{ text : package , description : package.menu_desc , action : 1 , parent : components , icon : , menuIndex : 0 , params : , handler : }] , elements : { plugins : [{ name : PackagePlugin , file : packageplugin.plugin.php , events : [ OnPageNotFound ] }] , snippets : [{ name : PackageSnippet , file : packagesnippet.snippet.php , properties : [{ name : testproperty , desc : package.packagesnippet.testproperty , type : textfield , options : , value : test value , lexicon : package:properties , area : }] }] , chunks : [{ name : PackageChunk , file : packagechunk.chunk.tpl }] , templates : [{ name : PackageTemplate , file : packagetemplate.template.tpl }] , tvs : [{ caption : MyTV , name : mytv , type : text , description : This is the best TV , templates : [ PackageTemplate ] }] } , resources : [{ pagetitle : Test Resources , alias : test-resources , content : Test content , parent : Some Resource , tvs : [{ name : test-tv , value : Value for test TV }] , others : [{ name : tagger-1 , value : Tag #1, Tag #2 }] }] , systemSettings : [{ key : test_key , type : textfield , area : default , value : it works }] } , database : { tables : [ PackageItem ] , prefix : modx_ , simpleObjects : [ SimplePackageItem ] } , extensionPackage : { serviceName : package , serviceClass : Package } , build : { readme : docs/readme.txt , resolver : { resolversDir : resolvers , after : [ resolver.customresolver.php ] } } }","title":"Full config example"},{"location":"config/examples/#minimal-config-example","text":"This config shows only required params for each section. If you don't need any section, remove it. { name : Package , lowCaseName : package , description : Package description , author : Author name , version : 1.0.0 , package :{ actions : [{ id : 1 , controller : index }] , menus : [{ text : package , action : 1 }] , elements : { plugins : [{ name : PackagePlugin , events : [ OnPageNotFound ] }] , snippets : [{ name : PackageSnippet , properties : [{ name : testproperty , value : test value }] }] , chunks : [{ name : PackageChunk }] , templates : [{ name : PackageTemplate }] , tvs : [{ caption : MyTV , templates : [ PackageTemplate ] }] } , resources : [{ pagetitle : Test Resources , alias : test-resources , content : Test content , tvs : [{ name : test-tv , value : Value for test TV }] }] , systemSettings : [{ key : test_key , value : it works }] } , database : { tables : [ PackageItem ] } , extensionPackage : {} , build : { resolver : { after : [ resolver.customresolver.php ] } } }","title":"Minimal config example"},{"location":"config/extension-package/","text":"Define extension package here. If you don't need to specify serviceName and serviceClass , but you need to register extension package, leave the extensionPackage object empty. Wrapper: extensionPackage { extensionPackage :{} } Available properties: serviceName (required both, or optional both) - Service's name serviceClass (required both, or optional both) - Service's class Example { extensionPackage :{ serviceName : package , serviceClass : Package } }","title":"Extension package"},{"location":"config/extension-package/#available-properties","text":"serviceName (required both, or optional both) - Service's name serviceClass (required both, or optional both) - Service's class","title":"Available properties:"},{"location":"config/extension-package/#example","text":"{ extensionPackage :{ serviceName : package , serviceClass : Package } }","title":"Example"},{"location":"config/general/","text":"In the _build folder create config.json file. All sections except the general are optional. If a section is not needed/used, remove it from the config.json. Available properties: name (required) - Name of the component lowCaseName (required) - Name of the component in lower case description (optional, default: '') - Some piece of information about the component author (required) - Probably your name / nickname or whatever you want version (required) - Version of your component Example { name : Package , lowCaseName : package , description : Package description , author : Author name , version : 1.0.0-pl }","title":"General"},{"location":"config/general/#available-properties","text":"name (required) - Name of the component lowCaseName (required) - Name of the component in lower case description (optional, default: '') - Some piece of information about the component author (required) - Probably your name / nickname or whatever you want version (required) - Version of your component","title":"Available properties:"},{"location":"config/general/#example","text":"{ name : Package , lowCaseName : package , description : Package description , author : Author name , version : 1.0.0-pl }","title":"Example"},{"location":"config/package/","text":"In this part we will add some elements, system settings and menus. Wrapper: package { package :{} } Actions Wrapper: actions (array) { package :{ actions : [] } } Available properties: id (required) - Action ID, used only in config's scope controller (required) - Controller's name (index in the most of cases) hasLayout (optional, default: 1) - Include manager layout langTopics (optional, default: $lowCaseName$:default) - Lexicon's lopic assets (optional, default: '') Example { package :{ actions : [{ id : 1, controller : index , hasLayout : 1, langTopics : package:default , assets : }] } } Menus Wrapper: menus (array) { package :{ menus : [] } } Available properties: text (required) - Menu text description (optional, default: '') - Menu description action (required, default: 1) - Action ID from this config / Action name (can be used in MODX 2.3+) parent (optional, default: components) - Parent menu icon (optional, default: '') menuIndex (optional, default: 0) params (optional, default: '') handler (optional, default: '') Example { package :{ actions : [{ id : 1, controller : index , hasLayout : 1, langTopics : package:default , assets : }], menus : [{ text : package , description : package.menu_desc , action : 1, parent : components , icon : , menuIndex : 0, params : , handler : }] } } Elements In this section we create some elements. During the installation, all elements are created as static. Wrapper: elements { package :{ elements : {} } } Chunks Wrapper: chunks (array) { package :{ elements : { chunks : [] } } } Available properties: name (required) - Chunk's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).chunk.tpl) - Chunk's filename with extension properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property Example { package :{ elements : { chunks : [{ name : PackageChunk , file : packagechunk.chunk.tpl , properties : [{ name : testproperty , value : testvalue }] }] } } } Snippets Wrapper: snippets (array) { package :{ elements : { snippets : [] } } } Available properties: name (required) - Snippet's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).snippet.php) - Snippet's filename with extension properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property Example { package :{ elements : { snippets : [{ name : PackageSnippet , file : packagesnippet.snippet.php , properties : [{ name : testproperty , value : testvalue }] }] } } } Templates Wrapper: templates (array) { package :{ elements : { templates : [] } } } Available properties: name (required) - Template's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).template.tpl) - Template's filename with extension properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property icon (optional) - Icon in the Resource Tree for resources using that Template (MODX 2.3+). Choose them from: http://fortawesome.github.io/Font-Awesome/icons/ type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property Example { package :{ elements : { templates : [{ name : PackageTemplate , file : packagetemplate.template.tpl , icon : icon-beer , properties : [{ name : testproperty , value : testvalue }] }] } } } Plugins Wrapper: plugins (array) { package :{ elements : { plugins : [] } } } Available properties: name (required) - Plugin's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).plugin.php) - Plugin's filename with extension events (required) - Array of events properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property Example { package :{ elements : { plugins : [{ name : PackagePlugin , file : packageplugin.plugin.php , events : [ OnPageNotFound ], properties : [{ name : testproperty , value : testvalue }] }] } } } Template Variables Wrapper: tvs (array) { package :{ elements : { tvs : [] } } } Available properties: caption (required) - TV's caption name (optional, default: strtolower($caption$)) - TV's name category (optional) - Name of category defined in categories element type (optional, default: text) - TV's type description (optional, default: null) - TV's description defaultValue (optional, default: null) - Default value of the TV inputOptionValues (optional, default: null) - Input options, for example items for single select list sortOrder (optional, default: 0) - If you're using more than one TV, this will determine which appear at the top (1 = top, bigger numbers sink to the bottom) templates (optional) - Array of template names for which will be this TV allowed display (optional) - Output type properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property inputProperties (optional) - Object with input properties, list of available properties depends on TV type outputProperties (optional) - Object with output properties, list of available properties depends on display (e.g. delimiter ; format ; tagname , tagid , class , style , attrib ; ...) Example { package :{ elements : { tvs : [{ caption : MyTV , name : mytv , type : list , description : This is the best TV , defaultValue : second , inputOptionValues : First==first||Second==second , templates : [ PackageTemplate ], properties : [{ name : testproperty , value : testvalue }], inputProperties : { allowBlank : false }, outputProperties : { delimiter : , } }] } } } Widgets Wrapper: widgets (array) { package :{ elements : { widgets : [] } } } lexicon, size Available properties: name (required) - Widget title description (optional, default: null) - Widget description type (optional, default: file) - Widget type. Could be set to: snippet widgets are MODX Snippets that are run and return their output. content has to be filled with a snippet name. html widgets are just straight HTML. content has to be filled with HTML code. file widgets are loaded directly from PHP files, which can either return their output or the name of the modDashboardWidgetClass-extended class to load. content has to be filled with the name of a PHP file. php widgets are widgets that are straight PHP in the widget content, similar to a Snippet. content has to be filled with the PHP code (with or without PHP tags). content (optional, default: null or strtolower($name$).widget.php for file type) - Widget content lexicon (optional, default: strtolower($name$):default) - Widget lexicon size (optional, default: half) - Widget size. Could be set to half , full , double Example { package :{ elements : { widgets : [{ name : MyWidget , description : This is the best widget , type : file , content : mywidget.widget.php , lexicon : mywidget:default , size : half , }] } } } Categories Category with name of the package is created automatically and all categories defined here will be nested under it. Wrapper: categories (array) { package :{ elements : { categories : [] } } } Available properties: name (required) - Category's name parent (optional) - Name of category that will be used as a parent Example { package :{ elements : { categories : [{ name : First category },{ name : Second category , parent : First category }] } } } Resources Here you can specify Resources that should be created. Note that this is only one way process, so all changes to those Resources from MODX Manager will be lost during package update process. Wrapper: resources (array) { package :{ resources : [] } } Available properties: pagetitle (required) - Page title longtitle (optional) - Long title description (optional) - Description introtext (optional) - Intro text alias (optional) - Alias parent (optional) - ID or Pagetitle of Resource that will be used as parent. Default: 0 content (optional) - Content of the Resource file (optional) - path to the file that will be used as a content field suffix (optional) - Suffix that will append to the alias, which will create filename that will be check if exists and used as content. Default: .html context_key (optional) - Context that will be used for Resource. Default: web template (optional) - Template name or 0 class_key (optional) - Class key of Resource. Default: modDocument content_type (optional) - Name of the content type that will be used for Resource link_attributes (optional) - Link attributes of the Resource published (optional) - 1/0 to set Resource published or not isfolder (optional) - 1/0 to set Resource as folder richtext (optional) - 1/0 to allow RichText editor menuindex (optional) - Resoruce's menu index searchable (optional) - 1/0 to set Resource searchable cacheable (optional) - 1/0 to set Resource cacheable deleted (optional) - 1/0 to set Resource as deleted. Default: 0 menutitle (optional) - Menu title. Default: hidemenu (optional) - 1/0 to show Resource in menu hide_children_in_tree (optional) - 1/0 to show Resource's children in tree. Default: 0 show_in_tree (optional) - 1/0 to show Resource in tree. Default: 1 tvs (optional) - Array of name value pair, where name is TV's name and value is desired value. Also can be used file option, to provide value from file. others (optional) - Array of name value pair that will be sent to Resource's create update processor setAsHome (optional) - 1/0 to link this Resource with Resource that is set as site_start Example { package :{ resources : [{ pagetitle : Test Resources , alias : test-resources , content : Test content , tvs : [{ name : test-tv , value : Value for test TV }] }] } } System settings Here you can specify all system settings that you need for your component. Note that all settings are automaticaly prefixed with lowCaseName (from General part) and settings core_path, assets_path and assets_url are created automatically. Wrapper: systemSettings (array) { package :{ systemSettings : [] } } Available properties: key (required) - Setting's key namespace (optional, default: lowCaseName) - Setting's namespace (will be used only as a prefix for the key) type (optional, default: textfield) - Setting's type, like textfield, textarea, combo-boolean, etc. area (optional, default: default) - Setting's area value (required) - Setting's value Example { package :{ systemSettings : [{ key : test_key , type : textfield , area : default , value : it works }] } }","title":"Package"},{"location":"config/package/#actions","text":"Wrapper: actions (array) { package :{ actions : [] } }","title":"Actions"},{"location":"config/package/#available-properties","text":"id (required) - Action ID, used only in config's scope controller (required) - Controller's name (index in the most of cases) hasLayout (optional, default: 1) - Include manager layout langTopics (optional, default: $lowCaseName$:default) - Lexicon's lopic assets (optional, default: '')","title":"Available properties:"},{"location":"config/package/#example","text":"{ package :{ actions : [{ id : 1, controller : index , hasLayout : 1, langTopics : package:default , assets : }] } }","title":"Example"},{"location":"config/package/#menus","text":"Wrapper: menus (array) { package :{ menus : [] } }","title":"Menus"},{"location":"config/package/#available-properties_1","text":"text (required) - Menu text description (optional, default: '') - Menu description action (required, default: 1) - Action ID from this config / Action name (can be used in MODX 2.3+) parent (optional, default: components) - Parent menu icon (optional, default: '') menuIndex (optional, default: 0) params (optional, default: '') handler (optional, default: '')","title":"Available properties:"},{"location":"config/package/#example_1","text":"{ package :{ actions : [{ id : 1, controller : index , hasLayout : 1, langTopics : package:default , assets : }], menus : [{ text : package , description : package.menu_desc , action : 1, parent : components , icon : , menuIndex : 0, params : , handler : }] } }","title":"Example"},{"location":"config/package/#elements","text":"In this section we create some elements. During the installation, all elements are created as static. Wrapper: elements { package :{ elements : {} } }","title":"Elements"},{"location":"config/package/#chunks","text":"Wrapper: chunks (array) { package :{ elements : { chunks : [] } } }","title":"Chunks"},{"location":"config/package/#available-properties_2","text":"name (required) - Chunk's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).chunk.tpl) - Chunk's filename with extension properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property","title":"Available properties:"},{"location":"config/package/#example_2","text":"{ package :{ elements : { chunks : [{ name : PackageChunk , file : packagechunk.chunk.tpl , properties : [{ name : testproperty , value : testvalue }] }] } } }","title":"Example"},{"location":"config/package/#snippets","text":"Wrapper: snippets (array) { package :{ elements : { snippets : [] } } }","title":"Snippets"},{"location":"config/package/#available-properties_3","text":"name (required) - Snippet's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).snippet.php) - Snippet's filename with extension properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property","title":"Available properties:"},{"location":"config/package/#example_3","text":"{ package :{ elements : { snippets : [{ name : PackageSnippet , file : packagesnippet.snippet.php , properties : [{ name : testproperty , value : testvalue }] }] } } }","title":"Example"},{"location":"config/package/#templates","text":"Wrapper: templates (array) { package :{ elements : { templates : [] } } }","title":"Templates"},{"location":"config/package/#available-properties_4","text":"name (required) - Template's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).template.tpl) - Template's filename with extension properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property icon (optional) - Icon in the Resource Tree for resources using that Template (MODX 2.3+). Choose them from: http://fortawesome.github.io/Font-Awesome/icons/ type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property","title":"Available properties:"},{"location":"config/package/#example_4","text":"{ package :{ elements : { templates : [{ name : PackageTemplate , file : packagetemplate.template.tpl , icon : icon-beer , properties : [{ name : testproperty , value : testvalue }] }] } } }","title":"Example"},{"location":"config/package/#plugins","text":"Wrapper: plugins (array) { package :{ elements : { plugins : [] } } }","title":"Plugins"},{"location":"config/package/#available-properties_5","text":"name (required) - Plugin's name category (optional) - Name of category defined in categories element file (optional, default: strtolower($name$).plugin.php) - Plugin's filename with extension events (required) - Array of events properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property","title":"Available properties:"},{"location":"config/package/#example_5","text":"{ package :{ elements : { plugins : [{ name : PackagePlugin , file : packageplugin.plugin.php , events : [ OnPageNotFound ], properties : [{ name : testproperty , value : testvalue }] }] } } }","title":"Example"},{"location":"config/package/#template-variables","text":"Wrapper: tvs (array) { package :{ elements : { tvs : [] } } }","title":"Template Variables"},{"location":"config/package/#available-properties_6","text":"caption (required) - TV's caption name (optional, default: strtolower($caption$)) - TV's name category (optional) - Name of category defined in categories element type (optional, default: text) - TV's type description (optional, default: null) - TV's description defaultValue (optional, default: null) - Default value of the TV inputOptionValues (optional, default: null) - Input options, for example items for single select list sortOrder (optional, default: 0) - If you're using more than one TV, this will determine which appear at the top (1 = top, bigger numbers sink to the bottom) templates (optional) - Array of template names for which will be this TV allowed display (optional) - Output type properties (optional) - An array of objects, where each object has those properties: name (required) - Name of the property description (optional) - Description of the property type (optional, default: textfield) - Type of property options (optional) - Property options value (optional) - Property default value lexicon (optional, default:strtolower($lowCaseName$):properties) - Lexicon topic for description area (optional) - Area of the property inputProperties (optional) - Object with input properties, list of available properties depends on TV type outputProperties (optional) - Object with output properties, list of available properties depends on display (e.g. delimiter ; format ; tagname , tagid , class , style , attrib ; ...)","title":"Available properties:"},{"location":"config/package/#example_6","text":"{ package :{ elements : { tvs : [{ caption : MyTV , name : mytv , type : list , description : This is the best TV , defaultValue : second , inputOptionValues : First==first||Second==second , templates : [ PackageTemplate ], properties : [{ name : testproperty , value : testvalue }], inputProperties : { allowBlank : false }, outputProperties : { delimiter : , } }] } } }","title":"Example"},{"location":"config/package/#widgets","text":"Wrapper: widgets (array) { package :{ elements : { widgets : [] } } } lexicon, size","title":"Widgets"},{"location":"config/package/#available-properties_7","text":"name (required) - Widget title description (optional, default: null) - Widget description type (optional, default: file) - Widget type. Could be set to: snippet widgets are MODX Snippets that are run and return their output. content has to be filled with a snippet name. html widgets are just straight HTML. content has to be filled with HTML code. file widgets are loaded directly from PHP files, which can either return their output or the name of the modDashboardWidgetClass-extended class to load. content has to be filled with the name of a PHP file. php widgets are widgets that are straight PHP in the widget content, similar to a Snippet. content has to be filled with the PHP code (with or without PHP tags). content (optional, default: null or strtolower($name$).widget.php for file type) - Widget content lexicon (optional, default: strtolower($name$):default) - Widget lexicon size (optional, default: half) - Widget size. Could be set to half , full , double","title":"Available properties:"},{"location":"config/package/#example_7","text":"{ package :{ elements : { widgets : [{ name : MyWidget , description : This is the best widget , type : file , content : mywidget.widget.php , lexicon : mywidget:default , size : half , }] } } }","title":"Example"},{"location":"config/package/#categories","text":"Category with name of the package is created automatically and all categories defined here will be nested under it. Wrapper: categories (array) { package :{ elements : { categories : [] } } }","title":"Categories"},{"location":"config/package/#available-properties_8","text":"name (required) - Category's name parent (optional) - Name of category that will be used as a parent","title":"Available properties:"},{"location":"config/package/#example_8","text":"{ package :{ elements : { categories : [{ name : First category },{ name : Second category , parent : First category }] } } }","title":"Example"},{"location":"config/package/#resources","text":"Here you can specify Resources that should be created. Note that this is only one way process, so all changes to those Resources from MODX Manager will be lost during package update process. Wrapper: resources (array) { package :{ resources : [] } }","title":"Resources"},{"location":"config/package/#available-properties_9","text":"pagetitle (required) - Page title longtitle (optional) - Long title description (optional) - Description introtext (optional) - Intro text alias (optional) - Alias parent (optional) - ID or Pagetitle of Resource that will be used as parent. Default: 0 content (optional) - Content of the Resource file (optional) - path to the file that will be used as a content field suffix (optional) - Suffix that will append to the alias, which will create filename that will be check if exists and used as content. Default: .html context_key (optional) - Context that will be used for Resource. Default: web template (optional) - Template name or 0 class_key (optional) - Class key of Resource. Default: modDocument content_type (optional) - Name of the content type that will be used for Resource link_attributes (optional) - Link attributes of the Resource published (optional) - 1/0 to set Resource published or not isfolder (optional) - 1/0 to set Resource as folder richtext (optional) - 1/0 to allow RichText editor menuindex (optional) - Resoruce's menu index searchable (optional) - 1/0 to set Resource searchable cacheable (optional) - 1/0 to set Resource cacheable deleted (optional) - 1/0 to set Resource as deleted. Default: 0 menutitle (optional) - Menu title. Default: hidemenu (optional) - 1/0 to show Resource in menu hide_children_in_tree (optional) - 1/0 to show Resource's children in tree. Default: 0 show_in_tree (optional) - 1/0 to show Resource in tree. Default: 1 tvs (optional) - Array of name value pair, where name is TV's name and value is desired value. Also can be used file option, to provide value from file. others (optional) - Array of name value pair that will be sent to Resource's create update processor setAsHome (optional) - 1/0 to link this Resource with Resource that is set as site_start","title":"Available properties:"},{"location":"config/package/#example_9","text":"{ package :{ resources : [{ pagetitle : Test Resources , alias : test-resources , content : Test content , tvs : [{ name : test-tv , value : Value for test TV }] }] } }","title":"Example"},{"location":"config/package/#system-settings","text":"Here you can specify all system settings that you need for your component. Note that all settings are automaticaly prefixed with lowCaseName (from General part) and settings core_path, assets_path and assets_url are created automatically. Wrapper: systemSettings (array) { package :{ systemSettings : [] } }","title":"System settings"},{"location":"config/package/#available-properties_10","text":"key (required) - Setting's key namespace (optional, default: lowCaseName) - Setting's namespace (will be used only as a prefix for the key) type (optional, default: textfield) - Setting's type, like textfield, textarea, combo-boolean, etc. area (optional, default: default) - Setting's area value (required) - Setting's value","title":"Available properties:"},{"location":"config/package/#example_10","text":"{ package :{ systemSettings : [{ key : test_key , type : textfield , area : default , value : it works }] } }","title":"Example"}]}